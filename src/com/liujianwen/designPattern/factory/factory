#工厂模式
工厂模式的本质就是对获取对象过程的抽象。
用工厂方法代替了new操作, 将选择实现类, 创建对象统一管理和控制.从而将调用者(Client)与实现类进行解耦.实现了创建者与调用者分离;

###静态工厂模式
静态工厂模式是工厂模式中最简单的一种，他可以用比较简单的方式隐藏创建对象的细节，一般只需要告诉工厂类所需要的类型，工厂类就会返回需要的产品类，而客户端看到的也只是产品的抽象对象(interface)，因此无需关心到底是返回了哪个子类
####优点
1. 隐藏了对象创建的细节，将产品的实例化过程放到了工厂中实现。
2. 客户端基本不用关心使用的是哪个产品，只需要知道用工厂的那个方法(或传入什么参数)就行了.
3. 方便添加新的产品子类，每次只需要修改工厂类传递的类型值就行了。
4. 遵循了依赖倒转原则。

####缺点
1. 适用于产品子类型差不多, 使用的方法名都相同的情况.
2. 每添加一个产品子类，都必须在工厂类中添加一个判断分支(或一个方法)，这违背了OCP(开闭原则)。

###工厂方法模式
由于静态工厂方法模式不满足OCP, 因此就出现了工厂方法模式; 工厂方法模式和静态工厂模式最大的不同在于: 静态工厂模式只有一个(对于一个项目/独立模块)只有一个工厂类, 而工厂方法模式则有一组实现了相同接口的工厂类.
####优点
基本与静态工厂模式一致，多的一点优点就是遵循了开闭原则，使得模式的灵活性更强。

####缺点
与静态工厂模式差不多, 但是增加了类组织的复杂性;

####小结
虽然根据理论原则, 需要使用工厂方法模式, 但实际上, 常用的还是静态工厂模式.

###抽象工厂模式
抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构. 在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。
####优点
1. 封装了产品的创建，使得不需要知道具体是哪种产品，只需要知道是哪个工厂就行了。
2. 可以支持不同类型的产品，使得模式灵活性更强。
3. 可以非常方便的使用一族中间的不同类型的产品。
####缺点
1. 结构太过臃肿，如果产品类型比较多，或者产品族类比较多，就会非常难于管理。
2. 每次如果添加一组产品，那么所有的工厂类都必须添加一个方法，这样违背了开闭原则。所以一般适用于产品组合产品族变化不大的情况。